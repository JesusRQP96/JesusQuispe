{
  "hash": "87ea12f01d31230f31bd68dd0918ac51",
  "result": {
    "markdown": "---\ntitle: \"Aprendizaje automatico usando Tidymodels\"\nsubtitle: \"Barplot\"\ndate: \"2021-06-10\"\ncategories: [Quantitative finance, Machine Learning]\nexecute:\n  echo: false\n  message: false\n  warning: false\n---\n\n\n# Aplicacion de Machine learning empleando Tidymodels \n\n## Carga de paquetes \n\n\n::: {.cell}\n\n:::\n\n\n\n## Modelo black- sholes\n\nUno de los modelos clasicos para llevar acabo el pricing de opciones es el modelo black-sholes el cual tipicamente plantea la siguiente entidad : \n\n\n$$ C(S_0,t) = S_0 N(d_1) - Ke^{-r(T-t)}N(d_2)$$\n\n\nDonde : \n- $S_0$: Precio del subyacente (Stock Price)\n- $C(S0,t)$: Price of the Call Option\n- $K$: Exercise Price\n- $(T−t)$: Tiempo de maduracion, donde T es la fecha de ejercicio(Time to Maturity, where T is Exercise Date)\n- $σ$: Volatilidad subyacente (Underlying Volatility (a standard deviation of log returns))\n- $r$: Tasa de interes libre de riesgo (Risk-free Interest Rate (i.e., T-bill Rate))\n\n\n\nEcuacion la cual puede ser formulada del siguiente modo : \n\n\n::: {.cell}\n\n:::\n\n\n\n\nEmpleando la anterior expresion, podemos simular precios de opciones;asi como una base de datos de sus determinantes. Dado lo anterior, tendremos un escenario perfecto para llevar acabo metodologias asociadas al aprendizaje automatico o ML ya que podriamos calcular el predecir el precio de una opcion financiera . Asi partimos simulando la  base de datos necesaria para el problema de regresion que se nos presenta \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n        S  K    r         T sigma black_scholes observed_price\n    1: 40 20 0.00 0.2500000   0.1      20.00000       20.04016\n    2: 40 20 0.00 0.2500000   0.2      20.00000       19.85949\n    3: 40 20 0.00 0.2500000   0.3      20.00000       20.08943\n    4: 40 20 0.00 0.3333333   0.1      20.00000       19.95319\n    5: 40 20 0.00 0.3333333   0.2      20.00000       20.05970\n   ---                                                        \n44348: 50 40 0.03 1.4166667   0.2      12.35408       12.35424\n44349: 50 40 0.03 1.4166667   0.3      13.71750       13.80824\n44350: 50 40 0.03 1.5000000   0.1      11.78703       11.99148\n44351: 50 40 0.03 1.5000000   0.2      12.49918       12.77917\n44352: 50 40 0.03 1.5000000   0.3      13.92104       13.94021\n```\n:::\n:::\n\n\n\nInmediatamente procedemos a establecer el conjuntod de datos de entrenamiento y testeo. Asi como establecemos la metodologia de V-fold validacion cruzada sobre el conjunto de datos de entrenamiento\n\n\n::: {.cell}\n\n:::\n\n\n\n## Definicion del predictor\n\nPosteriormente procesamos la base de datos para facilitar la estimacion de algun modelo, en este caso correspondiente al marco teorico de analisis de regresion.Para ello empleamos una 'recipe'\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Definicion del modelo  o Engine\n\nDefinimos  el modelo \n\n\n::: {.cell}\n\n:::\n\n\n\n## Definicion de los flujos de trabajo\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nLuego procedemos a ajustar el modelo planteado\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Mejor modelo\n\nProcedemos a seleccionar el mejor modelo empleando para ello la metrica de error de la raiz cuadrada media estandarizada o rsme( por sus siglas en ingles  )\n\n\n::: {.cell}\n\n:::\n\n\n### Metricas en los datos de prueba del mejor modelo\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n          .model      rmse       rsq\n1:          mars 1.2432680 0.9627034\n2: Random.Forest 0.2153714 0.9988867\n3:     Light.gbm 5.0747239 0.9848114\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}